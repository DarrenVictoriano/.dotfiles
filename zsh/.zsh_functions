
#!/bin/bash

function pandoc_md_to_pdf () {
    # https://github.com/Wandmalfarbe/pandoc-latex-template?tab=readme-ov-file
    pandoc "$1" -o "$2" --verbose --template=eisvogel --from markdown --listings -V listings-no-page-break -V listings-disable-line-numbers
}

function kbash () {
	#Execute a command in a container.
	# tester1-follow follow-edge-0
	readonly namespace=${1:?"The namespace must be specified"}
	readonly pod_name=${2:?"The pod name must be specified"}
	kubectl exec -n "$namespace" "$pod_name" -it -- env "TERM=${TERM:-xterm}" bash;
}

function kconfiglist () {
	# View all configmap files [namespace]
	kubectl get configmap -n "$1"
}

function kreadconfig () {
	# View all configmap files [namespace]
	kubectl get configmap -n "$1" "$2" -o json
}

function ksecretslist () {
	# View all configmap files [namespace]
	kubectl get secrets -n "$1"
}

function kreadsecrets () {
	# View all configmap files [namespace]
	kubectl get secrets -n "$1" "$2" -o json
}

function jl() {
	cd /Users/dxv1220/code/jupyter_notes || exit
	jupyter-lab
}

function scale_up() {
	readonly namespace=${1:?"The namespace must be specified"}
	readonly service_name=${2:?"The service name must be specified"}
	kubectl scale statefulsets --replicas=1 -n "$namespace" "$service_name"
}

function scale_down() {
	readonly namespace=${1:?"The namespace must be specified"}
	readonly service_name=${2:?"The service name must be specified"}
	kubectl scale statefulsets --replicas=0 -n "$namespace" "$service_name"
}

function format() {
	if [[ "$1" = "-f" ]]; then
		var=$(cat "$2")
		python /Users/dxv1220/code/scripts/tojson.py "$var"
	else
		python /Users/dxv1220/code/scripts/tojson.py "$1"
	fi
}

function history_clean() {
	history | awk '{first = $1; $1 =""; print $0}' | sed 's/^ //g'
}

function decode() {
	echo "$1" | base64 -D | gunzip | jq
}

function getimage() {
	readonly namespace=${1:?"The namespace must be specified"}
	echo "kubectl get statefulsets -n '$namespace' -o jsonpath='{.items[0].spec.template.spec.containers[0].image}' \n"
	kubectl get statefulsets -n "$namespace" -o jsonpath='{.items[0].spec.template.spec.containers[0].image}'
}

function sga() {
	# show git aliases
    # Assuming Oh My Zsh is installed in the default location
    git_plugin_file="$HOME/.oh-my-zsh/plugins/git/git.plugin.zsh"
    
    # Check if the plugin file exists
    if [[ -f "$git_plugin_file" ]]; then
        # Use grep to extract lines starting with "alias"
        grep "^alias" "$git_plugin_file"
    else
        echo "Git plugin file not found."
    fi
}

function show_zsh_aliases() {
    # Assuming Oh My Zsh is installed in the default location
    git_plugin_file="$HOME/.zsh_aliases"
    
    # Check if the plugin file exists
    if [[ -f "$git_plugin_file" ]]; then
        # Use grep to extract lines starting with "alias"
        grep "^alias" "$git_plugin_file"
    else
        echo "Git plugin file not found."
    fi
}

function show_zsh_functions() {
    # Assuming Oh My Zsh is installed in the default location
    git_plugin_file="$HOME/.zsh_functions"
    
    # Check if the plugin file exists
    if [[ -f "$git_plugin_file" ]]; then
        # Use grep to extract lines starting with "alias"
        grep "^function" "$git_plugin_file"
    else
        echo "Git plugin file not found."
    fi
}
